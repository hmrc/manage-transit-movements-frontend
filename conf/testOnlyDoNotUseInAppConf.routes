# IF THE MICRO-SERVICE DOES NOT NEED ANY TEST-ONLY END-POINTS (ALWAYS PREFERRED) DELETE THIS FILE.

# !!!WARNING!!! This file MUST NOT be referenced in the "application.conf" file to avoid risk of rolling test routes in the production environment.
# If you need test routes when running tests in CI make sure that the profile for this micro-service (used by service-manager) defines this router as parameter.
# To do so add the following line to the micro-service profile: "-Dapplication.router=testOnlyDoNotUseInAppConf.Routes"
# To start the micro-service locally using the test routes run the following command: "sbt run -Dapplication.router=testOnlyDoNotUseInAppConf.Routes"

# Any test-only end-point should be defined here.
# !!!WARNING!!! Every route defined in this file MUST be prefixed with "/test-only/". This is because NGINX is blocking every uri containing the string "test-only" in production.
# Failing to follow this rule may result in test routes deployed in production.

# Test routes

+ nocsrf
POST        /manage-transit-movements/test-only/arrival/submit                                                          controllers.testOnly.TestOnlyArrivalsRouterController.arrivalNotificationMessageToCore()

+ nocsrf
PUT         /manage-transit-movements/test-only/arrival/resubmit                                                        controllers.testOnly.TestOnlyArrivalsRouterController.resubmitArrivalNotificationMessageToCore()

+ nocsrf
POST        /manage-transit-movements/test-only/arrival/message                                                         controllers.testOnly.TestOnlyArrivalsRouterController.messageToCore()

+ nocsrf
POST        /manage-transit-movements/test-only/message                                                                 controllers.testOnly.TestOnlyRouterController.fromCoreMessage()

+ nocsrf
POST        /manage-transit-movements/test-only/departure/submit                                                        controllers.testOnly.TestOnlyDeparturesRouterController.declarationMessageToCore()

+ nocsrf
POST        /manage-transit-movements/test-only/departure/message                                                       controllers.testOnly.TestOnlyDeparturesRouterController.messageToCore()

+ nocsrf
POST        /manage-transit-movements/test-only/departure-outbound                                                      controllers.testOnly.TestOnlyP5DeparturesAPIController.outboundDepartureMessage()

+ nocsrf
POST        /manage-transit-movements/test-only/:departureId/departure-inbound                                          controllers.testOnly.TestOnlyP5DeparturesAPIController.inboundDepartureMessage(departureId: String)

+ nocsrf
POST        /manage-transit-movements/test-only/:departureId/departure-outbound-message                               controllers.testOnly.TestOnlyP5DeparturesAPIController.addMessageToDeparture(departureId: String)

+ nocsrf
GET         /manage-transit-movements/test-only/:departureId/departure/:messageId/message                               controllers.testOnly.TestOnlyP5DeparturesAPIController.departureMessage(departureId: String, messageId: String)

+ nocsrf
POST        /manage-transit-movements/test-only/cancellation/submit                                                     controllers.testOnly.TestOnlyDeparturesRouterController.declarationCancellationMessageToCore()

+ nocsrf
GET         /manage-transit-movements/test-only/view-arrival-notifications                                              controllers.testOnly.ViewAllArrivalsP5Controller.onPageLoad(page: Option[Int], mrn: Option[String])
+ nocsrf
POST        /manage-transit-movements/test-only/view-arrival-notifications                                              controllers.testOnly.ViewAllArrivalsP5Controller.onSubmit()

+ nocsrf
GET         /manage-transit-movements/test-only/view-departure-declarations                                             controllers.testOnly.ViewAllDeparturesP5Controller.onPageLoad(page: Option[Int], lrn: Option[String])
+ nocsrf
POST        /manage-transit-movements/test-only/view-departure-declarations                                             controllers.testOnly.ViewAllDeparturesP5Controller.onSubmit()

GET         /manage-transit-movements/test-only/:departureId/goods-under-control-index                                 controllers.testOnly.GoodsUnderControlIndexController.onPageLoad(departureId: String)

GET         /manage-transit-movements/test-only/:departureId/goods-under-control                                       controllers.testOnly.GoodsUnderControlP5Controller.noRequestedDocuments(departureId: String)

GET         /manage-transit-movements/test-only/:departureId/goods-under-control-document-requested                    controllers.testOnly.GoodsUnderControlP5Controller.requestedDocuments(departureId: String)

GET        /manage-transit-movements/test-only/:departureId/amend-departure-declaration-errors/:lrn                    controllers.testOnly.RejectionMessageP5Controller.onPageLoad(page: Option[Int], departureId: String, lrn: LocalReferenceNumber)

GET        /manage-transit-movements/test-only/:departureId/departure-declaration-errors/:lrn                              controllers.testOnly.DepartureDeclarationErrorsP5Controller.onPageLoad(departureId: String, lrn: LocalReferenceNumber)

GET        /manage-transit-movements/test-only/:departureId/cancellation-errors/:lrn                                        controllers.testOnly.CancellationNotificationErrorsP5Controller.onPageLoad(departureId: String, lrn: LocalReferenceNumber)

GET        /manage-transit-movements/test-only/:arrivalId/notification-errors                                        controllers.testOnly.ArrivalNotificationWithoutFunctionalErrorsP5Controller.onPageLoad(arrivalId: String)


GET        /manage-transit-movements/test-only/:departureId/review-departure-declaration-errors/:lrn                    controllers.testOnly.ReviewDepartureErrorsP5Controller.onPageLoad(page: Option[Int], departureId: String, lrn: LocalReferenceNumber)

GET        /manage-transit-movements/test-only/:departureId/review-cancellation-errors/:lrn                             controllers.testOnly.ReviewCancellationErrorsP5Controller.onPageLoad(page: Option[Int], departureId: String, lrn: LocalReferenceNumber)

GET        /manage-transit-movements/test-only/:departureId/send-departure-declaration-errors/:lrn                      controllers.testOnly.RejectionMessageP5Controller.onAmend(departureId: String, lrn: LocalReferenceNumber)

GET        /manage-transit-movements/test-only/:departureId/is-declaration-cancelled/:lrn                                   controllers.testOnly.DepartureCancelledP5Controller.isDeclarationCancelled(departureId: String, lrn: LocalReferenceNumber)

GET        /manage-transit-movements/test-only/:departureId/declaration-cancelled/:lrn                                      controllers.testOnly.DepartureCancelledP5Controller.declarationCancelled(departureId: String, lrn: LocalReferenceNumber)

GET        /manage-transit-movements/test-only/:departureId/declaration-not-cancelled/:lrn                                  controllers.testOnly.DepartureCancelledP5Controller.declarationNotCancelled(departureId: String, lrn: LocalReferenceNumber)

GET        /manage-transit-movements/test-only/:arrivalId/unloading-remarks-errors                                     controllers.testOnly.UnloadingRemarkWithoutFunctionalErrorsP5Controller.onPageLoad(arrivalId: String)

GET        /manage-transit-movements/test-only/:arrivalId/review-unloading-remarks-errors                               controllers.testOnly.UnloadingRemarkWithFunctionalErrorsP5Controller.onPageLoad(page: Option[Int], arrivalId: String)

GET        /manage-transit-movements/test-only/:arrivalId/review-arrival-notification-errors                           controllers.testOnly.ArrivalNotificationWithFunctionalErrorsP5Controller.onPageLoad(page: Option[Int], arrivalId: String)

GET        /manage-transit-movements/test-only/:departureId/transit-accompanying-document/:messageId                    controllers.testOnly.TransitAccompanyingDocumentController.getTAD(messageId: String, departureId: String)

GET        /manage-transit-movements/test-only/:arrivalId/unloading-permission-document/:messageId                      controllers.testOnly.UnloadingPermissionController.getUnloadingPermissionDocument(messageId: String, arrivalId: String)

GET        /manage-transit-movements/test-only/:arrivalId/:messageId/amend-guarantee-errors/:lrn                        controllers.testOnly.GuaranteeRejectedP5Controller.onPageLoad(arrivalId: String, messageId: String, lrn: LocalReferenceNumber)

GET        /manage-transit-movements/test-only/send-guarantee-errors/:lrn                                               controllers.testOnly.GuaranteeRejectedP5Controller.onAmend(lrn: LocalReferenceNumber,departureId:String)

+ nocsrf
POST        /manage-transit-movements/test-only/arrival-outbound                                                        controllers.testOnly.TestOnlyP5ArrivalsAPIController.outboundArrivalMessage()

+ nocsrf
POST        /manage-transit-movements/test-only/:arrivalId/unloading-outbound                                          controllers.testOnly.TestOnlyP5ArrivalsAPIController.outboundUnloadingMessage(arrivalId: String)

+ nocsrf
POST        /manage-transit-movements/test-only/:arrivalId/arrival-inbound                                              controllers.testOnly.TestOnlyP5ArrivalsAPIController.inboundArrivalMessage(arrivalId: String)

# Add all the application routes to the prod.routes file
->         /                          prod.Routes
